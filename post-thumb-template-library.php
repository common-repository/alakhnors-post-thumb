<?php
/*
Plugin Name: Post thumb revisited template library
Description: Library for post-thumb revisited
Version: 2.0
Author:  Alakhnor
Author URI: http://www.alakhnor.com/post-thumb

	Copyright (c) 2006 Victor Chang (http://theblemish.com) for post thumb
	Copyright (c) 2007 Alakhnor (http://www.alakhnor.info) for post thumb revisited
	Post Thumbs is released under the GNU General Public License (GPL)
	http://www.gnu.org/licenses/gpl.txt

	This is a WordPress 2 plugin (http://wordpress.org).
        Highslide JS is licensed under a Creative Commons Attribution-NonCommercial 2.5 License: http://creativecommons.org/licenses/by-nc/2.5/
*/
/********************************************************************************************************/
/* List of functions for Post-thumb revisited
/*
/*        function pt_tag_show			: Display a list of thumbnails from a tag (using SimpleTagging) 
/*        function pt_slideshow			: Displays a simple slideshow
/*        function pt_RSS_Import		: display rss
/*        function pt_list_categories		: wp_list_categories with hs effect
/*        function pt_list_bookmarks		: wp_list_bookmarks with hs effect
/*        function pt_previous_post_link	: previous_post_link with inframe tag added
/*        function pt_next_post_link		: next_post_link with inframe tag added
/*
/********************************************************************************************************/

add_action('wp_head', 'include_ptl_header');

/****************************************************************/
/* slideshow includes
/****************************************************************/
function include_ptl_header() {

	echo '<!-- Start Of Script Generated By Post-Thumb Revisited Library -->'."\n";
	?>
	<script type="text/javascript" src="<?php echo PT_URLPATH; ?>js/xfade2.js"></script>
	<link rel="stylesheet" href="<?php echo PT_URLPATH; ?>js/slideshow.css" type="text/css" media="screen" />
	<?php
	echo '<!-- End Of Script Generated By Post-Thumb Revisited Library -->'."\n";
}
/****************************************************************/
/* Displays a simple slideshow
/* Array:
/*	'post_url'       = post url (permalink)
/*	'server_image'   = absolute path to thumbnail
/*	'image_location' = thumbnail url
/*	'alt_text'       = post title
/*	'post_ID'        = post ID
/*	'the_image'      = image url
/*	'show_title'     = SHOWTITLE result (html code string)
/****************************************************************/
function pt_slideshow ($arg, $random=false) {

	parse_str($arg, $new_args);
	$new_args = array_change_key_case($new_args, CASE_UPPER);

	// Retrieves specific parameters
	if (isset($new_args['WIDTH'])) $width = $new_args['WIDTH']; else $width = 180;
	if (isset($new_args['HEIGHT'])) $height = $new_args['HEIGHT']; else $height = 120;

	$style = ' style="width: '.$width.'px; height: '.$height.'px;" ';
	$html_slideshow = '<div id="rotator" style="width: '.$width.'px; height: '.$height.'px;" >';
	if ($random)
		$html_slideshow .= get_random_thumb($arg);
	else
		$html_slideshow .= get_recent_thumbs($arg);
	$html_slideshow .= '</div>';
	$html_slideshow = str_replace('<img', '<img'.$style, $html_slideshow);
	
	echo $html_slideshow;
}
/****************************************************************/
/* Return a cleaned string
/****************************************************************/
function encode_html ($item) {

	$umlaute = array('€','‚','ƒ','„','…','†','‡','ˆ','‰','Š','‹','Œ','Ž','‘','’','“','”','•','–','—','˜','™','š','›','œ','ž','Ÿ','¡','¢','£','¤','¥','¦','§','¨','©','ª','«','¬','®','¯','°','±','²','³','´','µ','¶','·','¸','¹','º','»','¼','½','¾','¿','À','Á','Â','Ã','Ä','Å','Æ','Ç','È','É','Ê','Ë','Ì','Í','Î','Ï','Ð','Ñ','Ò','Ó','Ô','Õ','Ö','×','Ø','Ù','Ú','Û','Ü','Ý','Þ','ß','à','á','â','ã','ä','å','æ','ç','è','é','ê','ë','ì','í','î','ï','ð','ñ','ò','ó','ô','õ','ö','÷','ø','ù','ú','û','ü','ý','þ','ÿ',utf8_encode('€'),utf8_encode('‚'),utf8_encode('ƒ'),utf8_encode('„'),utf8_encode('…'),utf8_encode('†'),utf8_encode('‡'),utf8_encode('ˆ'),utf8_encode('‰'),utf8_encode('Š'),utf8_encode('‹'),utf8_encode('Œ'),utf8_encode('Ž'),utf8_encode('‘'),utf8_encode('’'),utf8_encode('“'),utf8_encode('”'),utf8_encode('•'),utf8_encode('–'),utf8_encode('—'),utf8_encode('˜'),utf8_encode('™'),utf8_encode('š'),utf8_encode('›'),utf8_encode('œ'),utf8_encode('ž'),utf8_encode('Ÿ'),utf8_encode('¡'),utf8_encode('¢'),utf8_encode('£'),utf8_encode('¤'),utf8_encode('¥'),utf8_encode('¦'),utf8_encode('§'),utf8_encode('¨'),utf8_encode('©'),utf8_encode('ª'),utf8_encode('«'),utf8_encode('¬'),utf8_encode('®'),utf8_encode('¯'),utf8_encode('°'),utf8_encode('±'),utf8_encode('²'),utf8_encode('³'),utf8_encode('´'),utf8_encode('µ'),utf8_encode('¶'),utf8_encode('·'),utf8_encode('¸'),utf8_encode('¹'),utf8_encode('º'),utf8_encode('»'),utf8_encode('¼'),utf8_encode('½'),utf8_encode('¾'),utf8_encode('¿'),utf8_encode('À'),utf8_encode('Á'),utf8_encode('Â'),utf8_encode('Ã'),utf8_encode('Ä'),utf8_encode('Å'),utf8_encode('Æ'),utf8_encode('Ç'),utf8_encode('È'),utf8_encode('É'),utf8_encode('Ê'),utf8_encode('Ë'),utf8_encode('Ì'),utf8_encode('Í'),utf8_encode('Î'),utf8_encode('Ï'),utf8_encode('Ð'),utf8_encode('Ñ'),utf8_encode('Ò'),utf8_encode('Ó'),utf8_encode('Ô'),utf8_encode('Õ'),utf8_encode('Ö'),utf8_encode('×'),utf8_encode('Ø'),utf8_encode('Ù'),utf8_encode('Ú'),utf8_encode('Û'),utf8_encode('Ü'),utf8_encode('Ý'),utf8_encode('Þ'),utf8_encode('ß'),utf8_encode('à'),utf8_encode('á'),utf8_encode('â'),utf8_encode('ã'),utf8_encode('ä'),utf8_encode('å'),utf8_encode('æ'),utf8_encode('ç'),utf8_encode('è'),utf8_encode('é'),utf8_encode('ê'),utf8_encode('ë'),utf8_encode('ì'),utf8_encode('í'),utf8_encode('î'),utf8_encode('ï'),utf8_encode('ð'),utf8_encode('ñ'),utf8_encode('ò'),utf8_encode('ó'),utf8_encode('ô'),utf8_encode('õ'),utf8_encode('ö'),utf8_encode('÷'),utf8_encode('ø'),utf8_encode('ù'),utf8_encode('ú'),utf8_encode('û'),utf8_encode('ü'),utf8_encode('ý'),utf8_encode('þ'),utf8_encode('ÿ'),chr(128),chr(129),chr(130),chr(131),chr(132),chr(133),chr(134),chr(135),chr(136),chr(137),chr(138),chr(139),chr(140),chr(141),chr(142),chr(143),chr(144),chr(145),chr(146),chr(147),chr(148),chr(149),chr(150),chr(151),chr(152),chr(153),chr(154),chr(155),chr(156),chr(157),chr(158),chr(159),chr(160),chr(161),chr(162),chr(163),chr(164),chr(165),chr(166),chr(167),chr(168),chr(169),chr(170),chr(171),chr(172),chr(173),chr(174),chr(175),chr(176),chr(177),chr(178),chr(179),chr(180),chr(181),chr(182),chr(183),chr(184),chr(185),chr(186),chr(187),chr(188),chr(189),chr(190),chr(191),chr(192),chr(193),chr(194),chr(195),chr(196),chr(197),chr(198),chr(199),chr(200),chr(201),chr(202),chr(203),chr(204),chr(205),chr(206),chr(207),chr(208),chr(209),chr(210),chr(211),chr(212),chr(213),chr(214),chr(215),chr(216),chr(217),chr(218),chr(219),chr(220),chr(221),chr(222),chr(223),chr(224),chr(225),chr(226),chr(227),chr(228),chr(229),chr(230),chr(231),chr(232),chr(233),chr(234),chr(235),chr(236),chr(237),chr(238),chr(239),chr(240),chr(241),chr(242),chr(243),chr(244),chr(245),chr(246),chr(247),chr(248),chr(249),chr(250),chr(251),chr(252),chr(253),chr(254),chr(255),chr(256));
	$htmlcode = array('&euro;','&sbquo;','&fnof;','&bdquo;','&hellip;','&dagger;','&Dagger;','&circ;','&permil;','&Scaron;','&lsaquo;','&OElig;','&#x017D;','&lsquo;','&rsquo;','&ldquo;','&rdquo;','&bull;','&ndash;','&mdash;','&tilde;','&trade;','&scaron;','&rsaquo;','&oelig;','&#x017E;','&Yuml;','&iexcl;','&cent;','&pound;','&curren;','&yen;','&brvbar;','&sect;','&uml;','&copy;','&ordf;','&laquo;','&not;','&reg;','&macr;','&deg;','&plusmn;','&sup2;','&sup3;','&acute;','&micro;','&para;','&middot;','&cedil;','&supl;','&ordm;','&raquo;','&frac14;','&frac12;','&frac34;','&iquest;','&Agrave;','&Aacute;','&Acirc;','&Atilde;','&Auml;','&Aring;','&AElig;','&Ccedil;','&Egrave;','&Eacute;','&Ecirc;','&Euml;','&Igrave;','&Iacute;','&Icirc;','&Iuml;','&ETH;','&Ntilde;','&Ograve;','&Oacute;','&Ocirc;','&Otilde;','&Ouml;','&times;','&Oslash;','&Ugrave;','&Uacute;','&Ucirc;','&Uuml;','&Yacute;','&THORN;','&szlig;','&agrave;','&aacute;','&acirc;','&atilde;','&auml;','&aring;','&aelig;','&ccedil;','&egrave;','&eacute;','&ecirc;','&euml;','&igrave;','&iacute;','&icirc;','&iuml;','&eth;','&ntilde;','&ograve;','&oacute;','&ocirc;','&otilde;','&ouml;','&divide;','&oslash;','&ugrave;','&uacute;','&ucirc;','&uuml;','&yacute;','&thorn;','&yuml;','&euro;','&sbquo;','&fnof;','&bdquo;','&hellip;','&dagger;','&Dagger;','&circ;','&permil;','&Scaron;','&lsaquo;','&OElig;','&#x017D;','&lsquo;','&rsquo;','&ldquo;','&rdquo;','&bull;','&ndash;','&mdash;','&tilde;','&trade;','&scaron;','&rsaquo;','&oelig;','&#x017E;','&Yuml;','&iexcl;','&cent;','&pound;','&curren;','&yen;','&brvbar;','&sect;','&uml;','&copy;','&ordf;','&laquo;','&not;','&reg;','&macr;','&deg;','&plusmn;','&sup2;','&sup3;','&acute;','&micro;','&para;','&middot;','&cedil;','&supl;','&ordm;','&raquo;','&frac14;','&frac12;','&frac34;','&iquest;','&Agrave;','&Aacute;','&Acirc;','&Atilde;','&Auml;','&Aring;','&AElig;','&Ccedil;','&Egrave;','&Eacute;','&Ecirc;','&Euml;','&Igrave;','&Iacute;','&Icirc;','&Iuml;','&ETH;','&Ntilde;','&Ograve;','&Oacute;','&Ocirc;','&Otilde;','&Ouml;','&times;','&Oslash;','&Ugrave;','&Uacute;','&Ucirc;','&Uuml;','&Yacute;','&THORN;','&szlig;','&agrave;','&aacute;','&acirc;','&atilde;','&auml;','&aring;','&aelig;','&ccedil;','&egrave;','&eacute;','&ecirc;','&euml;','&igrave;','&iacute;','&icirc;','&iuml;','&eth;','&ntilde;','&ograve;','&oacute;','&ocirc;','&otilde;','&ouml;','&divide;','&oslash;','&ugrave;','&uacute;','&ucirc;','&uuml;','&yacute;','&thorn;','&yuml;','&euro;','','&sbquo;','&fnof;','&bdquo;','&hellip;','&dagger;','&Dagger;','&circ;','&permil;','&Scaron;','&lsaquo;','&OElig;','','&#x017D;','','','&lsquo;','&rsquo;','&ldquo;','&rdquo;','&bull;','&ndash;','&mdash;','&tilde;','&trade;','&scaron;','&rsaquo;','&oelig;','','&#x017E;','&Yuml;','&nbsp;','&iexcl;','&iexcl;','&iexcl;','&iexcl;','&yen;','&brvbar;','&sect;','&uml;','&copy;','&ordf;','&laquo;','&not;','­&shy;','&reg;','&macr;','&deg;','&plusmn;','&sup2;','&sup3;','&acute;','&micro;','&para;','&middot;','&cedil;','&supl;','&ordm;','&raquo;','&frac14;','&frac12;','&frac34;','&iquest;','&Agrave;','&Aacute;','&Acirc;','&Atilde;','&Auml;','&Aring;','&AElig;','&Ccedil;','&Egrave;','&Eacute;','&Ecirc;','&Euml;','&Igrave;','&Iacute;','&Icirc;','&Iuml;','&ETH;','&Ntilde;','&Ograve;','&Oacute;','&Ocirc;','&Otilde;','&Ouml;','&times;','&Oslash;','&Ugrave;','&Uacute;','&Ucirc;','&Uuml;','&Yacute;','&THORN;','&szlig;','&agrave;','&aacute;','&acirc;','&atilde;','&auml;','&aring;','&aelig;','&ccedil;','&egrave;','&eacute;','&ecirc;','&euml;','&igrave;','&iacute;','&icirc;','&iuml;','&eth;','&ntilde;','&ograve;','&oacute;','&ocirc;','&otilde;','&ouml;','&divide;','&oslash;','&ugrave;','&uacute;','&ucirc;','&uuml;','&yacute;','&thorn;','&yuml;');
	$ret = str_replace($umlaute, $htmlcode, $item);
        return $ret;
}
/****************************************************************/
/* Includes RSS functions
/****************************************************************/
// For function fetch_rss
if(file_exists(ABSPATH . WPINC . '/rss.php')) {
	@require_once (ABSPATH . WPINC . '/rss.php');
	// It's Wordpress 1.5.2 or 2.x. since it has been loaded successfully
} elseif (file_exists(ABSPATH . WPINC . '/rss-functions.php')) {
	@require_once (ABSPATH . WPINC . '/rss-functions.php');
	// In Wordpress 2.1, a new file name is being used
} else {
	die (__('Error in file: ' . __FILE__ . ' on line: ' . __LINE__ . '.<br />The Wordpress file "rss-functions.php" or "rss.php" could not be included.'));
}
/****************************************************************/
/* RSS class for PTR
/* 
/****************************************************************/
class ptRSS {
	var $rss;
	var $feedStr = '';
	
	var $mask = 'TIE';
	var $count =5;
	
	/*********************************************************************/
	/* Constructor
	/*********************************************************************/
	function ptRSS ($farg='mask=TIE&count=5', $earg='', $arg='') {
	
		// Retrieves parameters
		$new_args = pt_parse_arg($farg);unset($farg);
		if (isset($new_args['MASK'])) $this->mask = strtoupper($new_args['MASK']);
		if (isset($new_args['COUNT'])) $this->count = (int) $new_args['COUNT'];
		$this->earg 	= $earg;	unset($earg);
		$thiq->arg 	= $arg;		unset($arg);

		if ($this->earg=='') $this->earg = 'words=40&moretag=1&moretext=[Read More]&link=1';
		if ($this->arg=='') $this->arg = 'rounded=0&subfolder=feeds&keepratio=0&width=100&height=70&append=0&&altappend=thumbrss_';
		
	}
	/*********************************************************************/
	/* Formats feed
	/*********************************************************************/
	function ProcessFeed ($feedurl) {

		if ($feedurl == '') return '';
		$this->feedurl 	= $feedurl;	unset($feedurl);
		// fetches feed
		$this->rss = fetch_rss($this->feedurl);

		// Process feed
		foreach ($this->rss->items as $item) :
			if ($this->count == 0) break;
			$this->altcounter = $display%2;
			$this->ProcessItem($item);
			$this->count--;
      		endforeach;
      		
      		return $this->feedStr;
	}
	/*********************************************************************/
	/* Formats item
	/*********************************************************************/
	function ProcessItem ($item) {

		$class = ($this->altcounter == 0) ? ' alter' : '';

              	// Do you have problems with special characters, then comment the follow four lines
		$item = encode_html($item);

		// Processes all elements of the mask
		$this->feedStr .= '<div class="feedrss'.$class.'">';
		$li = strlen($this->mask);
		for ($i=0;$i<$li;$i++) :
			$this->ProcessElement($item, substr($this->mask, $i, 1));
		endfor;
		$this->feedStr .= '</div>';
		
	}
	/*********************************************************************/
	/* Formats item element
	/*********************************************************************/
	function ProcessElement ($item, $element) {
		
		switch ($element) :
			case 'T' :
				$this->feedStr .= '<a href="'.$item['link'].'" title="'.$item['title'].'">'.$item['title'].'</a>';
				break;
			case 'I' :
				$this->feedStr .= $this->GetThumbRSS($item);
				break;
			case 'D' :
				$this->feedStr .= trim($item['description']);
				break;
			case 'E' :
				$this->feedStr .= $this->GetExcerptRSS($item);
				break;
		endswitch;
	
	}
	/*********************************************************************/
	/* 
	/*********************************************************************/
	function GetThumbRSS($item){

		$pattern = '@src=[\'"]http([^[:space:]\'">]*)\.(jpg|jpeg|gif|png)[\'"]@i';
		if (preg_match($pattern, $item['description'], $match)) {
			$rssimg = 'http'.$match[1].'.'.$match[2];
			if (remote_file_exists($rssimg)) {
				$p = new pt_thumbnail(get_pt_options_all(), $rssimg, $this->arg);
				$rssthumb = $p->thumb_url;
				unset ($p);
				$thumbhtml = '<a href="'.$item['link'].'" title="'.$item['title'].'"><img src="'.$rssthumb.'" alt="'.$title.'" /></a>';
			}
 		}
		return $thumbhtml;
	}
	/*********************************************************************/
	/* 
	/*********************************************************************/
	function GetExcerptRSS($item){
	
		$new_args = pt_parse_arg($this->earg);
		
		// Retrieves specific parameters
		if (isset($new_args['MORETEXT'])) $more_text = $new_args['MORETEXT']; else $more_text = "...";
		$link = isset($new_args['LINK']);
		if (isset($new_args['MORETAG'])) $more_tag = $new_args['MORETAG']; else $more_tag = "span";
		if (isset($new_args['SHOWDOTS'])) $showdots = '...'; else $showdots = '';

		// Create more link or more text
		if ($link) {
			if ($more_tag == '')
				$more_link = '';
			else
				$more_link = '<' . $more_tag . ' class="more-link">';
			$more_link .= '<a href="'.$item['link'].'" title="Permanent Link to '.$item['title'].'">' . $more_text . '</a>';
	                if ($more_tag != '') $more_link .= '</' . $more_tag . '>' . "\n";
		} else
			$more_link = $more_text;

		$more_link = $showdots.$more_link;

		return get_pt_excerpt_sub($item['description'], $more_link, $this->earg);
	}
}
/****************************************************************/
/* Redefines previous_post_link
/****************************************************************/
function pt_previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {

	if (is_attachment())
		$post = & get_post($GLOBALS['post']->post_parent);
	else
		$post = get_previous_post($in_same_cat, $excluded_categories);

	if (!$post) return;

        $hs_url = get_permalink($post->ID);
        $url_inframe = pt_return_get($hs_url);
	$title = apply_filters('the_title', $post->post_title, $post);
	$string = '<a href="'.$url_inframe.'">';
	$link = str_replace('%title', $title, $link);
	$link = $pre . $string . $link . '</a>';

	$format = str_replace('%link', $link, $format);

	echo $format;
}
/****************************************************************/
/* Redefines next_post_link
/****************************************************************/
function pt_next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {

	$post = get_next_post($in_same_cat, $excluded_categories);

	if (!$post) return;

        $hs_url = get_permalink($post->ID);
        $url_inframe = pt_return_get($hs_url);
	$title = apply_filters('the_title', $post->post_title, $post);
	$string = '<a href="'.$url_inframe.'">';
	$link = str_replace('%title', $title, $link);
	$link = $string . $link . '</a>';
	$format = str_replace('%link', $link, $format);

	echo $format;
}

?>